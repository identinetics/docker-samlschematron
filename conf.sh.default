#!/usr/bin/env bash

DOCKERVOL_ROOT='/docker_volumes'
# data shared between containers goes via these definitions:
SHAREDDATA_ROOT="${DOCKERVOL_ROOT}/01shared_data"

# configure container
IMGID='99'  # range from 02 .. 99; must be unique
PROJSHORT='samlschtron'
export IMAGENAME="r2h2/$PROJSHORT${IMGID}"
export CONTAINERNAME="${IMGID}$PROJSHORT"
export CONTAINERUSER="$PROJSHORT${IMGID}"   # group and user to run container
export CONTAINERUID="80${IMGID}"     # gid and uid for CONTAINERUSER
export SHARED_CONTAINERS_GROUP="02nginx"   # volume shared with other containers
export BUILDARGS="
    --build-arg "USERNAME=$CONTAINERUSER" \
    --build-arg "UID=$CONTAINERUID" \
"
export ENVSETTINGS="
    -e LOGDIR=/var/log
    -e LOGLEVEL=INFO
"

export NETWORKSETTINGS="
    --net dockernet
    --ip 10.1.1.${IMGID}
"
VOLROOT="${DOCKERVOL_ROOT}/$CONTAINERNAME"  # container volumes on docker host
export VOLMAPPING="
    -v $VOLROOT/etc/pki:/etc/pki:ro
    -v $VOLROOT/var/log:/var/log:Z
    -v $SHAREDDATA_ROOT/$CONTAINERNAME/www/static:/export/static:Z
"

export STARTCMD='/start.sh'

# first start: create user/group/host directories
if [ $(id -u) -ne 0 ]; then
    sudo="sudo"
fi
if ! id -u $CONTAINERUSER &>/dev/null; then
    $sudo groupadd -g $CONTAINERUID $CONTAINERUSER
    $sudo adduser --gid $CONTAINERUID -M --uid $CONTAINERUID $CONTAINERUSER  #CentOS
    #$sudo adduser --gid $CONTAINERUID --no-create-home --disabled-password --gecos "" --uid $CONTAINERUID $CONTAINERUSER #Debian
fi

# create dir $1 with given user $2if not existing; set/repair ownership
function chkdir {
    dir=$1; user=$2
    $sudo mkdir -p "$VOLROOT/$dir"
    $sudo chown -R $user:$user "$VOLROOT/$dir"
}

chkdir var/log $CONTAINERUSER
chkdir $CONTAINERNAME/www/static $CONTAINERUSER $SHARED_CONTAINERS_GROUP $SHAREDDATA_ROOT

$sudo mkdir -p $SHAREDDATA_ROOT/$CONTAINERNAME/www/static
$sudo chown -R $CONTAINERUSER:$SHARED_CONTAINERS_GROUP $SHAREDDATA_ROOT/$CONTAINERNAME/www/static
